"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[555],{8555:()=>{async function t(t){let e,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:5,a=arguments.length>2?arguments[2]:void 0,n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,c=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,l=arguments.length>5&&void 0!==arguments[5]?arguments[5]:Math.random,i=3145728*o>>3,s=new Uint8Array(i);s.fill(0);let r=Math.min(t.length,i);if(r>0&&s.set(t.subarray(0,r)),0===n&&0===c){console.log("\n[embedTile] Embedding at (".concat(n,", ").concat(c,")")),console.log("  Payload size: ".concat(t.length," bytes")),console.log("  Capacity: ".concat(i," bytes")),console.log("  Bytes to copy: ".concat(r," bytes"));let e=Array.from(s.slice(0,Math.min(20,r))).map(t=>t.toString(16).padStart(2,"0")).join(" ");console.log("  Buffer first 20 bytes: ".concat(e))}if(a){let t=new OffscreenCanvas(1024,1024).getContext("2d");if(t.fillStyle="white",t.fillRect(0,0,1024,1024),n<a.width&&c<a.height){let e=Math.min(1024,a.width-n),o=Math.min(1024,a.height-c);e>0&&o>0&&t.putImageData(a,-n,-c)}e=t.getImageData(0,0,1024,1024).data}else e=function(t){let e=new Uint8ClampedArray(4194304);e.fill(255);for(let o=0;o<65536;o++){let o=1024*t()|0,a=1024*t()|0,n=256*t()|0,c=256*t()|0,l=256*t()|0,i=4*(1024*a+o);e[i]=n,e[i+1]=c,e[i+2]=l,e[i+3]=255}return e}(l);if(!function(t,e,o){let a=e.length/4*3*o,n=8*t.length;if(n>a)throw Error("tile overflow");let c=255^(1<<o)-1,l=0;for(let a=0;a<e.length;a+=4)for(let i=0;i<3;i++){let s=e[a+i]&c;for(let e=0;e<o&&l<n;e++,l++)s|=(t[l>>3]>>(7&l)&1)<<e;if(e[a+i]=s,l>=n)return}}(s,e,o),0===n&&0===c){console.log("[embedTile] After embedding, first 10 pixels (RGBA):");for(let t=0;t<40;t+=4)console.log("  Pixel ".concat(t/4,": R=").concat(e[t],", G=").concat(e[t+1],", B=").concat(e[t+2],", A=").concat(e[t+3]))}let g=new OffscreenCanvas(1024,1024);g.getContext("2d").putImageData(new ImageData(e,1024,1024),0,0);let h=await g.convertToBlob({type:"image/png"});return g.width=g.height=0,URL.createObjectURL(h)}function e(t,e,o,a){let n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:6,c=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,l=arguments.length>6&&void 0!==arguments[6]?arguments[6]:Math.random,i=t.width,s=t.height,r=t.data,g=new Uint8ClampedArray(e*o*4),h=0,f=0,d=0,M=i*s;for(let t=0;t<r.length;t+=4)h+=r[t],f+=r[t+1],d+=r[t+2];h=Math.round(h/M),f=Math.round(f/M),d=Math.round(d/M);for(let t=0;t<g.length;t+=4)g[t]=h,g[t+1]=f,g[t+2]=d,g[t+3]=255;let m=a||Math.max(100,e*o>>2),p=(t,e)=>{let o=t*(i-1),a=e*(s-1),n=Math.floor(o),c=Math.floor(a),l=Math.min(n+1,i-1),g=Math.min(c+1,s-1),h=o-n,f=a-c,d=(c*i+n)*4,M=(c*i+l)*4,m=(g*i+n)*4,p=(g*i+l)*4,u=(1-f)*((1-h)*r[d]+h*r[M])+f*((1-h)*r[m]+h*r[p]);return[Math.round(u),Math.round((1-f)*((1-h)*r[d+1]+h*r[M+1])+f*((1-h)*r[m+1]+h*r[p+1])),Math.round((1-f)*((1-h)*r[d+2]+h*r[M+2])+f*((1-h)*r[m+2]+h*r[p+2]))]};for(let t=0;t<m;t++){let t=l(),a=l(),i=Math.floor(t*e),s=Math.floor(a*o),[r,h,f]=p(t,a),d=Math.max(0,Math.min(255,r+Math.floor((l()-.5)*2*n))),M=Math.max(0,Math.min(255,h+Math.floor((l()-.5)*2*n))),m=Math.max(0,Math.min(255,f+Math.floor((l()-.5)*2*n))),u=Math.max(0,s-c),w=Math.min(o,s+c+1),y=Math.max(0,i-c),b=Math.min(e,i+c+1);for(let t=u;t<w;t++)for(let o=y;o<b;o++){let a=o-i,n=t-s,l=Math.sqrt(a*a+n*n);if(l<=c){let a=(t*e+o)*4;if(c>1&&l>c-1){let t=1-(l-(c-1));g[a]=Math.round(g[a]*(1-t)+d*t),g[a+1]=Math.round(g[a+1]*(1-t)+M*t),g[a+2]=Math.round(g[a+2]*(1-t)+m*t)}else g[a]=d,g[a+1]=M,g[a+2]=m;g[a+3]=255}}}return g}let o=new Uint8Array([83,84,69,71,79,51]);self.onmessage=async a=>{var n;let c,l,i,s,r,{data:g}=a;if("encode"!==g.type)return;let h=g.bits||5,f=null==(n=g.autoExpand)||n,d=await fetch(g.dataURL),M=d.body.getReader(),m=+d.headers.get("Content-Length"),p=[],u=0,w=m>0x6400000;if(w){console.log("Large file detected (".concat((m/1024/1024).toFixed(1),"MB), using chunked processing"));let t=[];for(;;){let{value:e,done:o}=await M.read();if(o)break;u+=e.length,t.push(e),postMessage({pct:u/m*.25,status:"Loading: ".concat((u/1024/1024).toFixed(1),"MB / ").concat((m/1024/1024).toFixed(1),"MB")})}c=new Uint8Array(t.reduce((t,e)=>t+e.length,0));let e=0;for(let o of t)c.set(o,e),e+=o.length}else{let t=[];for(;;){let{value:e,done:o}=await M.read();if(o)break;u+=e.length,t.push(e),postMessage({pct:u/m*.3})}c=new Uint8Array(t.reduce((t,e)=>t+e.length,0));let e=0;for(let o of t)c.set(o,e),e+=o.length}console.log("Original file first 20 bytes:",Array.from(c.slice(0,20)).map(t=>t.toString(16).padStart(2,"0")).join(" ")),console.log("Original file size:",c.length),console.log("Using raw data without compression"),postMessage({pct:w?.25:.3,status:"Processing ".concat((c.length/1024/1024).toFixed(1),"MB...")});let y=function(t,e){let a=function(t){let e=0;for(let o=0;o<t.length;o++)e=(e<<1|e>>>31)^t[o];return e>>>0}(t),n=new Uint8Array(19);n.set(o,0);let c=new DataView(n.buffer);c.setUint32(6,e.originalSize,!0),c.setUint32(10,a,!0);let l=+!!e.compressed;c.setUint8(14,l),c.setUint32(15,e.compressedSize||t.length,!0);let i=new Uint8Array(n.length+t.length);return i.set(n,0),i.set(t,n.length),console.log("[encodeWithMetadata] Created header+data: ".concat(i.length," bytes")),console.log("  Header (19 bytes): ".concat(Array.from(n).map(t=>t.toString(16).padStart(2,"0")).join(" "))),console.log("  Data starts with: ".concat(Array.from(t.slice(0,20)).map(t=>t.toString(16).padStart(2,"0")).join(" "))),console.log("  Result starts with: ".concat(Array.from(i.slice(0,40)).map(t=>t.toString(16).padStart(2,"0")).join(" "))),i}(c,{originalSize:c.length,compressed:!1,compressedSize:c.length});console.log("=== FILE SIZE CALCULATION ==="),console.log("Raw file size: ".concat(c.length.toLocaleString()," bytes")),console.log("With metadata: ".concat(y.length.toLocaleString()," bytes")),console.log("Bits per channel: ".concat(h)),console.log("Bytes per pixel: ".concat(3*h/8)),console.log("Required pixels: ".concat(Math.ceil(8*y.length/(3*h)).toLocaleString())),console.log("Square side needed: ".concat(Math.ceil(Math.sqrt(Math.ceil(8*y.length/(3*h)))))),console.log("Rounded to TILE: ".concat(1024*Math.ceil(Math.ceil(Math.sqrt(Math.ceil(8*y.length/(3*h))))/1024)));y.length;let b=!1;if(g.imageURL){let t=await fetch(g.imageURL),e=await t.blob(),o=await createImageBitmap(e),a=new OffscreenCanvas(o.width,o.height).getContext("2d");a.drawImage(o,0,0),s=a.getImageData(0,0,o.width,o.height),o.close(),postMessage({pct:.4});let n=Math.floor(s.width*s.height*3*h/8);if(console.log("Source image: ".concat(s.width,"\xd7").concat(s.height)),console.log("Source capacity: ".concat((n/1024/1024).toFixed(2)," MB")),console.log("Data size: ".concat((y.length/1024/1024).toFixed(2)," MB")),console.log("Bits per channel: ".concat(h)),y.length<=n)l=s.width,i=s.height,console.log("Using original image dimensions: ".concat(l,"\xd7").concat(i));else{if(!f){let t=((y.length-n)/1024/1024).toFixed(2);return postMessage({error:"Data file is too large for the cover image. The image can hold ".concat((n/1024/1024).toFixed(2)," MB but your data is ").concat((y.length/1024/1024).toFixed(2)," MB (").concat(t," MB overflow). Try increasing bits per channel or use a larger image.")})}let t=y.length,e=Math.ceil(Math.sqrt(Math.ceil(8*t/(3*h)))),o=Math.floor((e=1024*Math.ceil(e/1024))*e*3*h/8);for(;t>o;)if(e+=1024,o=Math.floor(e*e*3*h/8),e>16384)return postMessage({error:"Required canvas size ".concat(e,"\xd7").concat(e," exceeds limit of ").concat(16384,"\xd7").concat(16384)});l=e,i=e,b=!0,console.log("Expanding from ".concat(s.width,"\xd7").concat(s.height," to ").concat(l,"\xd7").concat(i," (square canvas)"))}}else{let t=y.length,e=Math.ceil(Math.sqrt(Math.ceil(8*t/(3*h)))),o=Math.floor((e=1024*Math.ceil(e/1024))*e*3*h/8);for(;t>o;)e+=1024,o=Math.floor(e*e*3*h/8);l=e,i=e}if(l>16384||i>16384)return postMessage({error:"Canvas ".concat(l,"\xd7").concat(i," exceeds GPU limit of ").concat(16384,"\xd7").concat(16384)});let x=Math.ceil(l/1024),v=Math.ceil(i/1024);if(s&&b){let t=l*i/(s.width*s.height),o=Math.floor(Math.max(1e4,l*i>>3)*Math.min(2,t));r=new ImageData(e(s,l,i,o,h<=4?2:4,t>4?2:1),l,i)}else if(s)if(s.width===l&&s.height===i)r=s;else{console.log("Creating pointillist expansion from ".concat(s.width,"x").concat(s.height," to ").concat(l,"x").concat(i));let t=l*i/(s.width*s.height),o=Math.floor(Math.max(1e4,l*i>>3)*Math.min(2,t));r=new ImageData(e(s,l,i,o,h<=4?2:4,t>4?2:1),l,i),console.log("Canvas is now a perfect ".concat(x,"x").concat(v," grid of ").concat(1024,"x").concat(1024," tiles with pointillist fill"))}let S=Math.floor(3145728*h/8),A=Math.ceil(y.length/S);console.log("\n=== ENCODING SETUP ==="),console.log("Total data size: ".concat(y.length," bytes")),console.log("Canvas dimensions: ".concat(l,"x").concat(i)),console.log("Tile capacity: ".concat(S," bytes per tile")),console.log("Total tiles needed for data: ".concat(A)),console.log("Grid: ".concat(x,"x").concat(v," = ").concat(x*v," tiles")),console.log("Total capacity: ".concat(x*v*S," bytes"));let C=0,U=0,T=v*x;console.log("Processing ".concat(T," tiles..."));let B=Date.now();for(let e=0;e<v;e++)for(let o=0;o<x;o++){let a=1024*o,n=1024*e,c=new Uint8Array(S),l=Math.min(S,y.length-C);if(l>0){if(c.set(y.subarray(C,C+l)),l<S){let t=31337*a+42069*n;for(let e=l;e<S;e++)t=0x41c64e6d*t+12345&0x7fffffff,c[e]=15&t}}else{let t=31337*a+42069*n;for(let e=0;e<S;e++)t=0x41c64e6d*t+12345&0x7fffffff,c[e]=7&t}if((U<3||U===T-1)&&(console.log("\n=== ENCODE Tile ".concat(U," at (").concat(o,",").concat(e,") ===")),console.log("  Position: (".concat(a,", ").concat(n,")")),console.log("  Data bytes: ".concat(l," bytes")),console.log("  Byte range: [".concat(C,", ").concat(C+l,")")),0===U&&l>=19)){let t=Array.from(y.slice(0,19)).map(t=>t.toString(16).padStart(2,"0")).join(" ");console.log("  METADATA HEADER: ".concat(t))}let i=await t(c,h,r,a,n);if(p.push(await (await fetch(i)).blob()),URL.revokeObjectURL(i),C+=l,++U%10==0||1===U||U===T){let t=U/T,e=U/((Date.now()-B)/1e3),o=(T-U)/e;postMessage({pct:.4+.4*t,status:"Encoding tile ".concat(U,"/").concat(T," (").concat(Math.round(100*t),"%) - ").concat(o>1?Math.round(o)+"s remaining":"finishing...")})}}console.log("\n=== FINAL ASSEMBLY ==="),console.log("Total data processed: ".concat(C," bytes out of ").concat(y.length," bytes")),console.log("Canvas dimensions: ".concat(l,"x").concat(i)),console.log("Tiles created: ".concat(p.length)),console.log("Expected tiles: ".concat(v*x)),p.length!==v*x&&console.error("TILE COUNT MISMATCH! Created ".concat(p.length," but expected ").concat(v*x));let D=new OffscreenCanvas(l,i),E=D.getContext("2d"),L=0;for(let t=0;t<v;t++)for(let e=0;e<x;e++){if(L>=p.length){console.error("Ran out of tiles at row ".concat(t,", col ").concat(e," (tile ").concat(L,")"));break}let o=1024*e,a=1024*t,n=p[L],c=await createImageBitmap(n);L<3&&console.log("Drawing tile ".concat(L," at row ").concat(t,", col ").concat(e," -> (").concat(o,", ").concat(a,")")),E.drawImage(c,o,a),c.close(),L++}console.log("Drew ".concat(L," tiles out of ").concat(p.length," total")),postMessage({pct:.9});try{console.log("Attempting to convert ".concat(l,"x").concat(i," canvas to PNG..."));let t=await D.convertToBlob({type:"image/png",quality:1});console.log("Successfully created PNG blob of size: ".concat(t.size," bytes")),postMessage({done:!0,png:t})}catch(t){console.error("Failed to convert canvas to PNG:",t),postMessage({error:"Failed to create PNG image. The canvas size (".concat(l,"\xd7").concat(i,") may exceed browser limits. Try using a smaller file or increasing bits per channel.")})}}}}]);