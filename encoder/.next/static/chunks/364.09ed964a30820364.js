(()=>{"use strict";let e=new Uint8Array([83,84,69,71,79,51]);self.onmessage=async t=>{let{data:o}=t;if("decode"!==o.type)return;let n=o.bits||5;try{let t,a=await fetch(o.imageURL),i=await a.blob(),c=await createImageBitmap(i),s=new OffscreenCanvas(c.width,c.height).getContext("2d");s.drawImage(c,0,0);let l=s.getImageData(0,0,c.width,c.height);c.close(),postMessage({pct:.2});let r=Math.ceil(l.width/1024),d=Math.ceil(l.height/1024),g=r*d,p=3145728*n>>3,m=[],y=0,f=0;console.log("\n=== DECODING SETUP ==="),console.log("Image dimensions: ".concat(l.width,"x").concat(l.height)),console.log("Grid: ".concat(r,"x").concat(d," = ").concat(g," tiles")),console.log("Tile capacity: ".concat(p," bytes per tile")),console.log("Expected ".concat(g*p," bytes total")),console.log("Bits per channel: ".concat(n));let h=Date.now();for(let e=0;e<d;e++)for(let t=0;t<r;t++){let o=1024*t,a=1024*e,i=Math.min(1024,l.width-o),c=Math.min(1024,l.height-a);if(i<=0||c<=0){console.warn("Skipping invalid tile ".concat(y," at (").concat(o,", ").concat(a,")"));continue}let s=new OffscreenCanvas(1024,1024).getContext("2d");if(s.fillStyle="white",s.fillRect(0,0,1024,1024),i>0&&c>0){let e=new OffscreenCanvas(i,c);e.getContext("2d").putImageData(l,-o,-a),s.drawImage(e,0,0)}let r=s.getImageData(0,0,1024,1024);if(0===y){console.log("[decode] Tile 0 first 10 pixels (RGBA):");for(let e=0;e<40;e+=4)console.log("  Pixel ".concat(e/4,": R=").concat(r.data[e],", G=").concat(r.data[e+1],", B=").concat(r.data[e+2],", A=").concat(r.data[e+3]))}let d=function(e,t){let o=e.length/4*3*t>>3,n=new Uint8Array(o),a=0;for(let i=0;i<e.length;i+=4)for(let c=0;c<3;c++){let s=e[i+c];for(let e=0;e<t&&a<8*o;e++,a++)s>>e&1&&(n[a>>3]|=1<<(7&a))}return n}(r.data,n);if(m.push(d),f+=d.length,(y<3||y===g-1)&&console.log("Extracting tile ".concat(y," at (").concat(t,",").concat(e,") -> (").concat(o,", ").concat(a,")")),y<5||y>=g-2){let e=Array.from(d.slice(0,Math.min(20,d.length))).map(e=>e.toString(16).padStart(2,"0")).join(" ");if(console.log("  First 20 bytes: ".concat(e)),0===y){let e=d.slice(0,19),t=Array.from(e).map(e=>e.toString(16).padStart(2,"0")).join(" ");console.log("  METADATA HEADER: ".concat(t))}}if(++y%10==0||1===y||y===g){let e=y/g,t=(Date.now()-h)/1e3,o=y/t,n=(g-y)/o;postMessage({pct:.2+.6*e,status:"Extracting tile ".concat(y,"/").concat(g," (").concat(Math.round(100*e),"%) - ").concat(n>1?Math.round(n)+"s remaining":"finishing...")})}}console.log("\n=== DECODING COMPLETE ==="),console.log("Processed ".concat(y," tiles out of ").concat(g," expected")),console.log("Extracted ".concat(m.length," chunks")),console.log("Total bytes extracted: ".concat(f)),y!==g&&console.error("TILE COUNT MISMATCH! Processed ".concat(y," but expected ").concat(g)),console.log("\n=== DECODE SUMMARY ==="),console.log("Extracted ".concat(m.length," chunks, total: ").concat(f," bytes")),console.log("Image dimensions: ".concat(l.width,"x").concat(l.height)),console.log("Tile grid: ".concat(r,"x").concat(d," = ").concat(r*d," tiles")),console.log("\nChunk sizes:");for(let e=0;e<Math.min(10,m.length);e++)console.log("  Chunk ".concat(e,": ").concat(m[e].length," bytes"));m.length>10&&console.log("  ... (".concat(m.length-10," more chunks)"));let b=new Uint8Array(f),u=0;for(let e of m)b.set(e,u),u+=e.length;console.log("\nTotal concatenated: ".concat(u," bytes"));let x=Array.from(b.slice(0,Math.min(100,b.length))).map(e=>e.toString(16).padStart(2,"0")).join(" ");console.log("First 100 bytes of concatenated data: ".concat(x)),postMessage({pct:.9}),console.log("\n=== METADATA DECODING ===");let T=b.length,w=new Uint8Array([83,84,69,71,79,51]),A=!0;for(let e=0;e<w.length&&e<b.length;e++)if(b[e]!==w[e]){A=!1;break}if(A&&b.length>=19){let e=new DataView(b.buffer,b.byteOffset,b.byteLength).getUint32(15,!0);T=19+e,console.log("Found STEGO3 header, actual data size: ".concat(T," bytes (header: 19, data: ").concat(e,")")),console.log("Total extracted: ".concat(b.length," bytes, using first ").concat(T," bytes"))}let S=b.slice(0,T),D=function(t){if(t.length<14)return null;let o=!0;for(let n=0;n<e.length;n++)if(t[n]!==e[n]){o=!1;break}if(!o){let e=new Uint8Array([83,84,69,71,79,50]),o=new Uint8Array([83,84,69,71,79,49]),n=!0;for(let o=0;o<e.length;o++)if(t[o]!==e[o]){n=!1;break}if(n&&t.length>=14){let e=new DataView(t.buffer,t.byteOffset,t.byteLength),o=e.getUint32(6,!0),n=e.getUint32(10,!0);return{data:t.slice(14,14+o),metadata:{originalSize:o,checksum:n}}}let a=!0;for(let e=0;e<o.length;e++)if(t[e]!==o[e]){a=!1;break}if(a&&t.length>=10){let e=new DataView(t.buffer,t.byteOffset,t.byteLength).getUint32(6,!0);return{data:t.slice(10,10+e),metadata:{originalSize:e}}}return{data:t,metadata:{originalSize:t.length}}}if(t.length<19){let e=new DataView(t.buffer,t.byteOffset,t.byteLength),o=e.getUint32(6,!0),n=e.getUint32(10,!0);return{data:t.slice(14,14+o),metadata:{originalSize:o,checksum:n}}}let n=new DataView(t.buffer,t.byteOffset,t.byteLength),a=n.getUint32(6,!0),i=n.getUint32(10,!0),c=n.getUint8(14),s=n.getUint32(15,!0),l=t.slice(19,19+s);console.log("[decodeWithMetadata] Extracting compressed data:"),console.log("  Data starts at byte 19, length: ".concat(s)),console.log("  First 40 bytes of full data: ".concat(Array.from(t.slice(0,40)).map(e=>e.toString(16).padStart(2,"0")).join(" "))),console.log("  Extracted data first 20 bytes: ".concat(Array.from(l.slice(0,20)).map(e=>e.toString(16).padStart(2,"0")).join(" ")));let r=function(e){let t=0;for(let o=0;o<e.length;o++)t=(t<<1|t>>>31)^e[o];return t>>>0}(l);if(r!==i){console.error("Checksum mismatch! Stored: ".concat(i,", Calculated: ").concat(r)),console.log("Data size: ".concat(l.length," bytes"));let e=Array.from(l.slice(0,20)).map(e=>e.toString(16).padStart(2,"0")).join(" "),t=Array.from(l.slice(-20)).map(e=>e.toString(16).padStart(2,"0")).join(" ");console.log("First 20 bytes: ".concat(e)),console.log("Last 20 bytes: ".concat(t));for(let e=0;e<l.length&&(0===l[e]||!(e>1e3));e++);}return{data:l,metadata:{originalSize:a,checksum:i,compressed:(1&c)!=0,compressedSize:s}}}(S);D?(console.log("Successfully decoded with metadata:"),console.log("  Original size from metadata: ".concat(D.metadata.originalSize," bytes")),console.log("  Compressed: ".concat(D.metadata.compressed||!1)),console.log("  Compressed size: ".concat(D.metadata.compressedSize||"N/A"," bytes")),console.log("  Actual extracted data size: ".concat(D.data.length," bytes")),console.log("  Total data with metadata: ".concat(b.length," bytes")),console.log("  Checksum present: ".concat(void 0!==D.metadata.checksum)),D.metadata.compressed?(console.log("WARNING: Data marked as compressed but compression has been removed"),t=D.data):(t=D.data).length!==D.metadata.originalSize&&console.error("  WARNING: Size mismatch! Expected ".concat(D.metadata.originalSize,", got ").concat(t.length))):(console.log("No metadata found, using raw data"),t=b);let M=function(e){for(let t of[{bytes:[255,216,255],mimeType:"image/jpeg",extension:"jpg",description:"JPEG Image"},{bytes:[137,80,78,71],mimeType:"image/png",extension:"png",description:"PNG Image"},{bytes:[71,73,70,56],mimeType:"image/gif",extension:"gif",description:"GIF Image"},{bytes:[66,77],mimeType:"image/bmp",extension:"bmp",description:"BMP Image"},{bytes:[37,80,68,70],mimeType:"application/pdf",extension:"pdf",description:"PDF Document"},{bytes:[80,75,3,4],mimeType:"application/zip",extension:"zip",description:"ZIP Archive"},{bytes:[80,75,5,6],mimeType:"application/zip",extension:"zip",description:"ZIP Archive (empty)"},{bytes:[80,75,7,8],mimeType:"application/zip",extension:"zip",description:"ZIP Archive (spanned)"},{bytes:[208,207,17,224,161,177,26,225],mimeType:"application/vnd.ms-office",extension:"doc",description:"Microsoft Office Document"},{bytes:[31,139],mimeType:"application/gzip",extension:"gz",description:"GZIP Archive"},{bytes:[66,90,104],mimeType:"application/x-bzip2",extension:"bz2",description:"BZIP2 Archive"},{bytes:[55,122,188,175,39,28],mimeType:"application/x-7z-compressed",extension:"7z",description:"7-Zip Archive"},{bytes:[82,97,114,33],mimeType:"application/x-rar-compressed",extension:"rar",description:"RAR Archive"},{bytes:[40,181,47,253],mimeType:"application/zstd",extension:"zst",description:"Zstandard Compressed"},{bytes:[239,187,191],mimeType:"text/plain",extension:"txt",description:"UTF-8 Text with BOM"},{bytes:[77,90],mimeType:"application/x-msdownload",extension:"exe",description:"Windows Executable"},{bytes:[127,69,76,70],mimeType:"application/x-elf",extension:"elf",description:"ELF Executable"},{bytes:[0,0,0,32,102,116,121,112],mimeType:"video/mp4",extension:"mp4",description:"MP4 Video"},{bytes:[0,0,0,24,102,116,121,112],mimeType:"video/mp4",extension:"mp4",description:"MP4 Video"},{bytes:[73,68,51],mimeType:"audio/mpeg",extension:"mp3",description:"MP3 Audio"},{bytes:[255,251],mimeType:"audio/mpeg",extension:"mp3",description:"MP3 Audio"},{bytes:[79,103,103,83],mimeType:"audio/ogg",extension:"ogg",description:"OGG Audio"},{bytes:[123,34],mimeType:"application/json",extension:"json",description:"JSON Data"},{bytes:[123,10],mimeType:"application/json",extension:"json",description:"JSON Data"},{bytes:[91],mimeType:"application/json",extension:"json",description:"JSON Array"}])if(e.length>=t.bytes.length){let o=!0;for(let n=0;n<t.bytes.length;n++)if(e[n]!==t.bytes[n]){o=!1;break}if(o)return{mimeType:t.mimeType,extension:t.extension,description:t.description,suggestedName:"decoded_data.".concat(t.extension)}}let t=!0,o=Math.min(1e3,e.length);for(let n=0;n<o;n++){let o=e[n];if(o<32&&9!==o&&10!==o&&13!==o||o>126&&o<128){t=!1;break}}return t?{mimeType:"text/plain",extension:"txt",description:"Plain Text",suggestedName:"decoded_data.txt"}:{mimeType:"application/octet-stream",extension:"bin",description:"Binary Data",suggestedName:"decoded_data.bin"}}(t),E=Array.from(t.slice(0,20)).map(e=>e.toString(16).padStart(2,"0")).join(" ");console.log("First 20 bytes:",E),console.log("Detected type:",M.description);let z=new Blob([t],{type:M.mimeType});postMessage({done:!0,blob:z,suggestedName:M.suggestedName,fileSize:t.length,detectedType:M.description})}catch(e){postMessage({error:"Failed to decode: ".concat(e instanceof Error?e.message:"Unknown error")})}}})(),_N_E={};