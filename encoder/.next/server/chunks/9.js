(()=>{"use strict";let e=new Uint8Array([83,84,69,71,79,51]);self.onmessage=async({data:t})=>{if("decode"!==t.type)return;let i=t.bits||5;try{let o,n=await fetch(t.imageURL),a=await n.blob(),s=await createImageBitmap(a),l=new OffscreenCanvas(s.width,s.height).getContext("2d");l.drawImage(s,0,0);let r=l.getImageData(0,0,s.width,s.height);s.close(),postMessage({pct:.2});let c=Math.ceil(r.width/1024),d=Math.ceil(r.height/1024),g=c*d,p=3145728*i>>3,m=[],y=0,f=0;console.log(`
=== DECODING SETUP ===`),console.log(`Image dimensions: ${r.width}x${r.height}`),console.log(`Grid: ${c}x${d} = ${g} tiles`),console.log(`Tile capacity: ${p} bytes per tile`),console.log(`Expected ${g*p} bytes total`),console.log(`Bits per channel: ${i}`);let h=Date.now();for(let e=0;e<d;e++)for(let t=0;t<c;t++){let o=1024*t,n=1024*e,a=Math.min(1024,r.width-o),s=Math.min(1024,r.height-n);if(a<=0||s<=0){console.warn(`Skipping invalid tile ${y} at (${o}, ${n})`);continue}let l=new OffscreenCanvas(1024,1024).getContext("2d");if(l.fillStyle="white",l.fillRect(0,0,1024,1024),a>0&&s>0){let e=new OffscreenCanvas(a,s);e.getContext("2d").putImageData(r,-o,-n),l.drawImage(e,0,0)}let c=l.getImageData(0,0,1024,1024);if(0===y){console.log("[decode] Tile 0 first 10 pixels (RGBA):");for(let e=0;e<40;e+=4)console.log(`  Pixel ${e/4}: R=${c.data[e]}, G=${c.data[e+1]}, B=${c.data[e+2]}, A=${c.data[e+3]}`)}let d=function(e,t){let i=e.length/4*3*t>>3,o=new Uint8Array(i),n=0;for(let a=0;a<e.length;a+=4)for(let s=0;s<3;s++){let l=e[a+s];for(let e=0;e<t&&n<8*i;e++,n++)l>>e&1&&(o[n>>3]|=1<<(7&n))}return o}(c.data,i);if(m.push(d),f+=d.length,(y<3||y===g-1)&&console.log(`Extracting tile ${y} at (${t},${e}) -> (${o}, ${n})`),y<5||y>=g-2){let e=Array.from(d.slice(0,Math.min(20,d.length))).map(e=>e.toString(16).padStart(2,"0")).join(" ");if(console.log(`  First 20 bytes: ${e}`),0===y){let e=d.slice(0,19),t=Array.from(e).map(e=>e.toString(16).padStart(2,"0")).join(" ");console.log(`  METADATA HEADER: ${t}`)}}if(++y%10==0||1===y||y===g){let e=y/g,t=(Date.now()-h)/1e3,i=y/t,o=(g-y)/i;postMessage({pct:.2+.6*e,status:`Extracting tile ${y}/${g} (${Math.round(100*e)}%) - ${o>1?Math.round(o)+"s remaining":"finishing..."}`})}}console.log(`
=== DECODING COMPLETE ===`),console.log(`Processed ${y} tiles out of ${g} expected`),console.log(`Extracted ${m.length} chunks`),console.log(`Total bytes extracted: ${f}`),y!==g&&console.error(`TILE COUNT MISMATCH! Processed ${y} but expected ${g}`),console.log(`
=== DECODE SUMMARY ===`),console.log(`Extracted ${m.length} chunks, total: ${f} bytes`),console.log(`Image dimensions: ${r.width}x${r.height}`),console.log(`Tile grid: ${c}x${d} = ${c*d} tiles`),console.log(`
Chunk sizes:`);for(let e=0;e<Math.min(10,m.length);e++)console.log(`  Chunk ${e}: ${m[e].length} bytes`);m.length>10&&console.log(`  ... (${m.length-10} more chunks)`);let b=new Uint8Array(f),u=0;for(let e of m)b.set(e,u),u+=e.length;console.log(`
Total concatenated: ${u} bytes`);let x=Array.from(b.slice(0,Math.min(100,b.length))).map(e=>e.toString(16).padStart(2,"0")).join(" ");console.log(`First 100 bytes of concatenated data: ${x}`),postMessage({pct:.9}),console.log(`
=== METADATA DECODING ===`);let $=b.length,T=new Uint8Array([83,84,69,71,79,51]),w=!0;for(let e=0;e<T.length&&e<b.length;e++)if(b[e]!==T[e]){w=!1;break}if(w&&b.length>=19){let e=new DataView(b.buffer,b.byteOffset,b.byteLength).getUint32(15,!0);$=19+e,console.log(`Found STEGO3 header, actual data size: ${$} bytes (header: 19, data: ${e})`),console.log(`Total extracted: ${b.length} bytes, using first ${$} bytes`)}let A=b.slice(0,$),S=function(t){if(t.length<14)return null;let i=!0;for(let o=0;o<e.length;o++)if(t[o]!==e[o]){i=!1;break}if(!i){let e=new Uint8Array([83,84,69,71,79,50]),i=new Uint8Array([83,84,69,71,79,49]),o=!0;for(let i=0;i<e.length;i++)if(t[i]!==e[i]){o=!1;break}if(o&&t.length>=14){let e=new DataView(t.buffer,t.byteOffset,t.byteLength),i=e.getUint32(6,!0),o=e.getUint32(10,!0);return{data:t.slice(14,14+i),metadata:{originalSize:i,checksum:o}}}let n=!0;for(let e=0;e<i.length;e++)if(t[e]!==i[e]){n=!1;break}if(n&&t.length>=10){let e=new DataView(t.buffer,t.byteOffset,t.byteLength).getUint32(6,!0);return{data:t.slice(10,10+e),metadata:{originalSize:e}}}return{data:t,metadata:{originalSize:t.length}}}if(t.length<19){let e=new DataView(t.buffer,t.byteOffset,t.byteLength),i=e.getUint32(6,!0),o=e.getUint32(10,!0);return{data:t.slice(14,14+i),metadata:{originalSize:i,checksum:o}}}let o=new DataView(t.buffer,t.byteOffset,t.byteLength),n=o.getUint32(6,!0),a=o.getUint32(10,!0),s=o.getUint8(14),l=o.getUint32(15,!0),r=t.slice(19,19+l);console.log("[decodeWithMetadata] Extracting compressed data:"),console.log(`  Data starts at byte 19, length: ${l}`),console.log(`  First 40 bytes of full data: ${Array.from(t.slice(0,40)).map(e=>e.toString(16).padStart(2,"0")).join(" ")}`),console.log(`  Extracted data first 20 bytes: ${Array.from(r.slice(0,20)).map(e=>e.toString(16).padStart(2,"0")).join(" ")}`);let c=function(e){let t=0;for(let i=0;i<e.length;i++)t=(t<<1|t>>>31)^e[i];return t>>>0}(r);if(c!==a){console.error(`Checksum mismatch! Stored: ${a}, Calculated: ${c}`),console.log(`Data size: ${r.length} bytes`);let e=Array.from(r.slice(0,20)).map(e=>e.toString(16).padStart(2,"0")).join(" "),t=Array.from(r.slice(-20)).map(e=>e.toString(16).padStart(2,"0")).join(" ");console.log(`First 20 bytes: ${e}`),console.log(`Last 20 bytes: ${t}`);for(let e=0;e<r.length&&(0===r[e]||!(e>1e3));e++);}return{data:r,metadata:{originalSize:n,checksum:a,compressed:(1&s)!=0,compressedSize:l}}}(A);S?(console.log("Successfully decoded with metadata:"),console.log(`  Original size from metadata: ${S.metadata.originalSize} bytes`),console.log(`  Compressed: ${S.metadata.compressed||!1}`),console.log(`  Compressed size: ${S.metadata.compressedSize||"N/A"} bytes`),console.log(`  Actual extracted data size: ${S.data.length} bytes`),console.log(`  Total data with metadata: ${b.length} bytes`),console.log(`  Checksum present: ${void 0!==S.metadata.checksum}`),S.metadata.compressed?(console.log("WARNING: Data marked as compressed but compression has been removed"),o=S.data):(o=S.data).length!==S.metadata.originalSize&&console.error(`  WARNING: Size mismatch! Expected ${S.metadata.originalSize}, got ${o.length}`)):(console.log("No metadata found, using raw data"),o=b);let D=function(e){for(let t of[{bytes:[255,216,255],mimeType:"image/jpeg",extension:"jpg",description:"JPEG Image"},{bytes:[137,80,78,71],mimeType:"image/png",extension:"png",description:"PNG Image"},{bytes:[71,73,70,56],mimeType:"image/gif",extension:"gif",description:"GIF Image"},{bytes:[66,77],mimeType:"image/bmp",extension:"bmp",description:"BMP Image"},{bytes:[37,80,68,70],mimeType:"application/pdf",extension:"pdf",description:"PDF Document"},{bytes:[80,75,3,4],mimeType:"application/zip",extension:"zip",description:"ZIP Archive"},{bytes:[80,75,5,6],mimeType:"application/zip",extension:"zip",description:"ZIP Archive (empty)"},{bytes:[80,75,7,8],mimeType:"application/zip",extension:"zip",description:"ZIP Archive (spanned)"},{bytes:[208,207,17,224,161,177,26,225],mimeType:"application/vnd.ms-office",extension:"doc",description:"Microsoft Office Document"},{bytes:[31,139],mimeType:"application/gzip",extension:"gz",description:"GZIP Archive"},{bytes:[66,90,104],mimeType:"application/x-bzip2",extension:"bz2",description:"BZIP2 Archive"},{bytes:[55,122,188,175,39,28],mimeType:"application/x-7z-compressed",extension:"7z",description:"7-Zip Archive"},{bytes:[82,97,114,33],mimeType:"application/x-rar-compressed",extension:"rar",description:"RAR Archive"},{bytes:[40,181,47,253],mimeType:"application/zstd",extension:"zst",description:"Zstandard Compressed"},{bytes:[239,187,191],mimeType:"text/plain",extension:"txt",description:"UTF-8 Text with BOM"},{bytes:[77,90],mimeType:"application/x-msdownload",extension:"exe",description:"Windows Executable"},{bytes:[127,69,76,70],mimeType:"application/x-elf",extension:"elf",description:"ELF Executable"},{bytes:[0,0,0,32,102,116,121,112],mimeType:"video/mp4",extension:"mp4",description:"MP4 Video"},{bytes:[0,0,0,24,102,116,121,112],mimeType:"video/mp4",extension:"mp4",description:"MP4 Video"},{bytes:[73,68,51],mimeType:"audio/mpeg",extension:"mp3",description:"MP3 Audio"},{bytes:[255,251],mimeType:"audio/mpeg",extension:"mp3",description:"MP3 Audio"},{bytes:[79,103,103,83],mimeType:"audio/ogg",extension:"ogg",description:"OGG Audio"},{bytes:[123,34],mimeType:"application/json",extension:"json",description:"JSON Data"},{bytes:[123,10],mimeType:"application/json",extension:"json",description:"JSON Data"},{bytes:[91],mimeType:"application/json",extension:"json",description:"JSON Array"}])if(e.length>=t.bytes.length){let i=!0;for(let o=0;o<t.bytes.length;o++)if(e[o]!==t.bytes[o]){i=!1;break}if(i)return{mimeType:t.mimeType,extension:t.extension,description:t.description,suggestedName:`decoded_data.${t.extension}`}}let t=!0,i=Math.min(1e3,e.length);for(let o=0;o<i;o++){let i=e[o];if(i<32&&9!==i&&10!==i&&13!==i||i>126&&i<128){t=!1;break}}return t?{mimeType:"text/plain",extension:"txt",description:"Plain Text",suggestedName:"decoded_data.txt"}:{mimeType:"application/octet-stream",extension:"bin",description:"Binary Data",suggestedName:"decoded_data.bin"}}(o),M=Array.from(o.slice(0,20)).map(e=>e.toString(16).padStart(2,"0")).join(" ");console.log("First 20 bytes:",M),console.log("Detected type:",D.description);let z=new Blob([o],{type:D.mimeType});postMessage({done:!0,blob:z,suggestedName:D.suggestedName,fileSize:o.length,detectedType:D.description})}catch(e){postMessage({error:`Failed to decode: ${e instanceof Error?e.message:"Unknown error"}`})}},module.exports={}})();