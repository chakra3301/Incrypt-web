"use strict";exports.id=235,exports.ids=[235],exports.modules={3235:()=>{async function e(t,o=5,l,a=0,n=0,i=Math.random){let s,r=3145728*o>>3,g=new Uint8Array(r);g.fill(0);let h=Math.min(t.length,r);if(h>0&&g.set(t.subarray(0,h)),0===a&&0===n){console.log(`
[embedTile] Embedding at (${a}, ${n})`),console.log(`  Payload size: ${t.length} bytes`),console.log(`  Capacity: ${r} bytes`),console.log(`  Bytes to copy: ${h} bytes`);let e=Array.from(g.slice(0,Math.min(20,h))).map(e=>e.toString(16).padStart(2,"0")).join(" ");console.log(`  Buffer first 20 bytes: ${e}`)}if(l){let e=new OffscreenCanvas(1024,1024).getContext("2d");if(e.fillStyle="white",e.fillRect(0,0,1024,1024),a<l.width&&n<l.height){let t=Math.min(1024,l.width-a),o=Math.min(1024,l.height-n);t>0&&o>0&&e.putImageData(l,-a,-n)}s=e.getImageData(0,0,1024,1024).data}else s=function(e){let t=new Uint8ClampedArray(4194304);t.fill(255);for(let o=0;o<65536;o++){let o=1024*e()|0,l=1024*e()|0,a=256*e()|0,n=256*e()|0,i=256*e()|0,s=4*(1024*l+o);t[s]=a,t[s+1]=n,t[s+2]=i,t[s+3]=255}return t}(i);if(!function(e,t,o){let l=t.length/4*3*o,a=8*e.length;if(a>l)throw Error("tile overflow");let n=255^(1<<o)-1,i=0;for(let l=0;l<t.length;l+=4)for(let s=0;s<3;s++){let r=t[l+s]&n;for(let t=0;t<o&&i<a;t++,i++)r|=(e[i>>3]>>(7&i)&1)<<t;if(t[l+s]=r,i>=a)return}}(g,s,o),0===a&&0===n){console.log("[embedTile] After embedding, first 10 pixels (RGBA):");for(let e=0;e<40;e+=4)console.log(`  Pixel ${e/4}: R=${s[e]}, G=${s[e+1]}, B=${s[e+2]}, A=${s[e+3]}`)}let c=new OffscreenCanvas(1024,1024);c.getContext("2d").putImageData(new ImageData(s,1024,1024),0,0);let f=await c.convertToBlob({type:"image/png"});return c.width=c.height=0,URL.createObjectURL(f)}function t(e,o,l,a,n=6,i=1,s=Math.random){let r=e.width,g=e.height,h=e.data,c=new Uint8ClampedArray(o*l*4),f=0,d=0,$=0,M=r*g;for(let e=0;e<h.length;e+=4)f+=h[e],d+=h[e+1],$+=h[e+2];f=Math.round(f/M),d=Math.round(d/M),$=Math.round($/M);for(let e=0;e<c.length;e+=4)c[e]=f,c[e+1]=d,c[e+2]=$,c[e+3]=255;let m=a||Math.max(100,o*l>>2),p=(e,t)=>{let o=e*(r-1),l=t*(g-1),a=Math.floor(o),n=Math.floor(l),i=Math.min(a+1,r-1),s=Math.min(n+1,g-1),c=o-a,f=l-n,d=(n*r+a)*4,$=(n*r+i)*4,M=(s*r+a)*4,m=(s*r+i)*4,p=(1-f)*((1-c)*h[d]+c*h[$])+f*((1-c)*h[M]+c*h[m]);return[Math.round(p),Math.round((1-f)*((1-c)*h[d+1]+c*h[$+1])+f*((1-c)*h[M+1]+c*h[m+1])),Math.round((1-f)*((1-c)*h[d+2]+c*h[$+2])+f*((1-c)*h[M+2]+c*h[m+2]))]};for(let e=0;e<m;e++){let e=s(),t=s(),a=Math.floor(e*o),r=Math.floor(t*l),[g,h,f]=p(e,t),d=Math.max(0,Math.min(255,g+Math.floor((s()-.5)*2*n))),$=Math.max(0,Math.min(255,h+Math.floor((s()-.5)*2*n))),M=Math.max(0,Math.min(255,f+Math.floor((s()-.5)*2*n))),m=Math.max(0,r-i),u=Math.min(l,r+i+1),w=Math.max(0,a-i),x=Math.min(o,a+i+1);for(let e=m;e<u;e++)for(let t=w;t<x;t++){let l=t-a,n=e-r,s=Math.sqrt(l*l+n*n);if(s<=i){let l=(e*o+t)*4;if(i>1&&s>i-1){let e=1-(s-(i-1));c[l]=Math.round(c[l]*(1-e)+d*e),c[l+1]=Math.round(c[l+1]*(1-e)+$*e),c[l+2]=Math.round(c[l+2]*(1-e)+M*e)}else c[l]=d,c[l+1]=$,c[l+2]=M;c[l+3]=255}}}return c}let o=new Uint8Array([83,84,69,71,79,51]);self.onmessage=async({data:l})=>{let a,n,i,s,r;if("encode"!==l.type)return;let g=l.bits||5,h=l.autoExpand??!0,c=await fetch(l.dataURL),f=c.body.getReader(),d=+c.headers.get("Content-Length"),$=[],M=0,m=d>0x6400000;if(m){console.log(`Large file detected (${(d/1024/1024).toFixed(1)}MB), using chunked processing`);let e=[];for(;;){let{value:t,done:o}=await f.read();if(o)break;M+=t.length,e.push(t),postMessage({pct:M/d*.25,status:`Loading: ${(M/1024/1024).toFixed(1)}MB / ${(d/1024/1024).toFixed(1)}MB`})}a=new Uint8Array(e.reduce((e,t)=>e+t.length,0));let t=0;for(let o of e)a.set(o,t),t+=o.length}else{let e=[];for(;;){let{value:t,done:o}=await f.read();if(o)break;M+=t.length,e.push(t),postMessage({pct:M/d*.3})}a=new Uint8Array(e.reduce((e,t)=>e+t.length,0));let t=0;for(let o of e)a.set(o,t),t+=o.length}console.log("Original file first 20 bytes:",Array.from(a.slice(0,20)).map(e=>e.toString(16).padStart(2,"0")).join(" ")),console.log("Original file size:",a.length),console.log("Using raw data without compression"),postMessage({pct:m?.25:.3,status:`Processing ${(a.length/1024/1024).toFixed(1)}MB...`});let p=function(e,t){let l=function(e){let t=0;for(let o=0;o<e.length;o++)t=(t<<1|t>>>31)^e[o];return t>>>0}(e),a=new Uint8Array(19);a.set(o,0);let n=new DataView(a.buffer);n.setUint32(6,t.originalSize,!0),n.setUint32(10,l,!0);let i=+!!t.compressed;n.setUint8(14,i),n.setUint32(15,t.compressedSize||e.length,!0);let s=new Uint8Array(a.length+e.length);return s.set(a,0),s.set(e,a.length),console.log(`[encodeWithMetadata] Created header+data: ${s.length} bytes`),console.log(`  Header (19 bytes): ${Array.from(a).map(e=>e.toString(16).padStart(2,"0")).join(" ")}`),console.log(`  Data starts with: ${Array.from(e.slice(0,20)).map(e=>e.toString(16).padStart(2,"0")).join(" ")}`),console.log(`  Result starts with: ${Array.from(s.slice(0,40)).map(e=>e.toString(16).padStart(2,"0")).join(" ")}`),s}(a,{originalSize:a.length,compressed:!1,compressedSize:a.length});console.log("=== FILE SIZE CALCULATION ==="),console.log(`Raw file size: ${a.length.toLocaleString()} bytes`),console.log(`With metadata: ${p.length.toLocaleString()} bytes`),console.log(`Bits per channel: ${g}`),console.log(`Bytes per pixel: ${3*g/8}`),console.log(`Required pixels: ${Math.ceil(8*p.length/(3*g)).toLocaleString()}`),console.log(`Square side needed: ${Math.ceil(Math.sqrt(Math.ceil(8*p.length/(3*g))))}`),console.log(`Rounded to TILE: ${1024*Math.ceil(Math.ceil(Math.sqrt(Math.ceil(8*p.length/(3*g))))/1024)}`);p.length;let u=!1;if(l.imageURL){let e=await fetch(l.imageURL),t=await e.blob(),o=await createImageBitmap(t),a=new OffscreenCanvas(o.width,o.height).getContext("2d");a.drawImage(o,0,0),s=a.getImageData(0,0,o.width,o.height),o.close(),postMessage({pct:.4});let r=Math.floor(s.width*s.height*3*g/8);if(console.log(`Source image: ${s.width}\xd7${s.height}`),console.log(`Source capacity: ${(r/1024/1024).toFixed(2)} MB`),console.log(`Data size: ${(p.length/1024/1024).toFixed(2)} MB`),console.log(`Bits per channel: ${g}`),p.length<=r)n=s.width,i=s.height,console.log(`Using original image dimensions: ${n}\xd7${i}`);else{if(!h){let e=((p.length-r)/1024/1024).toFixed(2);return postMessage({error:`Data file is too large for the cover image. The image can hold ${(r/1024/1024).toFixed(2)} MB but your data is ${(p.length/1024/1024).toFixed(2)} MB (${e} MB overflow). Try increasing bits per channel or use a larger image.`})}let e=p.length,t=Math.ceil(Math.sqrt(Math.ceil(8*e/(3*g)))),o=Math.floor((t=1024*Math.ceil(t/1024))*t*3*g/8);for(;e>o;)if(t+=1024,o=Math.floor(t*t*3*g/8),t>16384)return postMessage({error:`Required canvas size ${t}\xd7${t} exceeds limit of 16384\xd716384`});n=t,i=t,u=!0,console.log(`Expanding from ${s.width}\xd7${s.height} to ${n}\xd7${i} (square canvas)`)}}else{let e=p.length,t=Math.ceil(Math.sqrt(Math.ceil(8*e/(3*g)))),o=Math.floor((t=1024*Math.ceil(t/1024))*t*3*g/8);for(;e>o;)t+=1024,o=Math.floor(t*t*3*g/8);n=t,i=t}if(n>16384||i>16384)return postMessage({error:`Canvas ${n}\xd7${i} exceeds GPU limit of 16384\xd716384`});let w=Math.ceil(n/1024),x=Math.ceil(i/1024);if(s&&u){let e=n*i/(s.width*s.height),o=Math.floor(Math.max(1e4,n*i>>3)*Math.min(2,e));r=new ImageData(t(s,n,i,o,g<=4?2:4,e>4?2:1),n,i)}else if(s)if(s.width===n&&s.height===i)r=s;else{console.log(`Creating pointillist expansion from ${s.width}x${s.height} to ${n}x${i}`);let e=n*i/(s.width*s.height),o=Math.floor(Math.max(1e4,n*i>>3)*Math.min(2,e));r=new ImageData(t(s,n,i,o,g<=4?2:4,e>4?2:1),n,i),console.log(`Canvas is now a perfect ${w}x${x} grid of 1024x1024 tiles with pointillist fill`)}let y=Math.floor(3145728*g/8),b=Math.ceil(p.length/y);console.log(`
=== ENCODING SETUP ===`),console.log(`Total data size: ${p.length} bytes`),console.log(`Canvas dimensions: ${n}x${i}`),console.log(`Tile capacity: ${y} bytes per tile`),console.log(`Total tiles needed for data: ${b}`),console.log(`Grid: ${w}x${x} = ${w*x} tiles`),console.log(`Total capacity: ${w*x*y} bytes`);let S=0,A=0,U=x*w;console.log(`Processing ${U} tiles...`);let C=Date.now();for(let t=0;t<x;t++)for(let o=0;o<w;o++){let l=1024*o,a=1024*t,n=new Uint8Array(y),i=Math.min(y,p.length-S);if(i>0){if(n.set(p.subarray(S,S+i)),i<y){let e=31337*l+42069*a;for(let t=i;t<y;t++)e=0x41c64e6d*e+12345&0x7fffffff,n[t]=15&e}}else{let e=31337*l+42069*a;for(let t=0;t<y;t++)e=0x41c64e6d*e+12345&0x7fffffff,n[t]=7&e}if((A<3||A===U-1)&&(console.log(`
=== ENCODE Tile ${A} at (${o},${t}) ===`),console.log(`  Position: (${l}, ${a})`),console.log(`  Data bytes: ${i} bytes`),console.log(`  Byte range: [${S}, ${S+i})`),0===A&&i>=19)){let e=Array.from(p.slice(0,19)).map(e=>e.toString(16).padStart(2,"0")).join(" ");console.log(`  METADATA HEADER: ${e}`)}let s=await e(n,g,r,l,a);if($.push(await (await fetch(s)).blob()),URL.revokeObjectURL(s),S+=i,++A%10==0||1===A||A===U){let e=A/U,t=A/((Date.now()-C)/1e3),o=(U-A)/t;postMessage({pct:.4+.4*e,status:`Encoding tile ${A}/${U} (${Math.round(100*e)}%) - ${o>1?Math.round(o)+"s remaining":"finishing..."}`})}}console.log(`
=== FINAL ASSEMBLY ===`),console.log(`Total data processed: ${S} bytes out of ${p.length} bytes`),console.log(`Canvas dimensions: ${n}x${i}`),console.log(`Tiles created: ${$.length}`),console.log(`Expected tiles: ${x*w}`),$.length!==x*w&&console.error(`TILE COUNT MISMATCH! Created ${$.length} but expected ${x*w}`);let T=new OffscreenCanvas(n,i),B=T.getContext("2d"),v=0;for(let e=0;e<x;e++)for(let t=0;t<w;t++){if(v>=$.length){console.error(`Ran out of tiles at row ${e}, col ${t} (tile ${v})`);break}let o=1024*t,l=1024*e,a=$[v],n=await createImageBitmap(a);v<3&&console.log(`Drawing tile ${v} at row ${e}, col ${t} -> (${o}, ${l})`),B.drawImage(n,o,l),n.close(),v++}console.log(`Drew ${v} tiles out of ${$.length} total`),postMessage({pct:.9});try{console.log(`Attempting to convert ${n}x${i} canvas to PNG...`);let e=await T.convertToBlob({type:"image/png",quality:1});console.log(`Successfully created PNG blob of size: ${e.size} bytes`),postMessage({done:!0,png:e})}catch(e){console.error("Failed to convert canvas to PNG:",e),postMessage({error:`Failed to create PNG image. The canvas size (${n}\xd7${i}) may exceed browser limits. Try using a smaller file or increasing bits per channel.`})}}}};